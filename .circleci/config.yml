version: 2.1

commands:
  install_depends:
    steps:
      - run:
          name: Install Dependencies
          command: |
            npm ci --prefix src/

      - run:
          name: Install Test Modules
          command: |
            npm i -D jest-junit

      - run:
          name: Make Directory for Jest Junit
          command: |
            mkdir -p jest-results

  compose_image:
    steps:
      - run:
          name: Docker Compose Up
          command: |
            docker-compose up -d

jobs:
  build:
    docker:
      - image: cimg/node:lts
        auth:
          username: thenewoldmodel # NOTE(Daniel): how do I hide these values?
          password: 4stig-FireRed_1480 # ... is there a formatting pattern to hide this?
    environment:
      ENV: CI

    working_directory: ~/assignment-1-S3729065

    steps:
      - checkout
      - install_depends
      - compose_image
      - run:
          name: compile
          command: |
            npm build ./
      #- browser-tools/install-firefox
      #- browser-tools/install-geckodriver #NOTE(Daniel): install browsers for testing.

  pack:
    docker:
      - image: cimg/node:lts # using cimg/node:15.11.0 as stated in the docs, documented as the preferred way.
    steps:
      - run:
          name: compile
          command: |
            npm i --save npm@latest
            npm build ./

  jest-test:
    docker:
      - image: cimg/node:lts # using cimg/node:15.11.0 as stated in the docs, documented as the preferred way.
    
    environment:
      JEST_JUNIT_OUTPUT_DIR: jest-results
    
    steps:
      - run:
          name: unit test
          command: |
            npm run test-unit

      - store_test_results:
          path: jest-results

  # integrity-test:
  #     docker:
  #       - image: cimg/node:lts
  #       - image: mongo:4.0
  #     environment:
  #       APP_PORT: 8080
  #     steps:
          # - run:
          #     name: Start Test Service
          #     command: |
          #       npm run start
  #       - run:
  #           name: Integration Test
  #           command: |
  #             npm run test-integration
  #       - store_test_results:
  #           path: integrity-results

  # e2e-test:
  #   docker:
  #     - image: cimg/node:lts
  #   steps:
  #   - run:
  #       name: E2E Test
  #       command: |
  #         npm run test-e2e
  #   - store_test_results:
  #       path: e2e-results

  # linting:
  #   docker:
  #     - image: cimg/node:lts
  #   steps:
  #     - run:
  #         name: Linting
  #         command: |
  #           npm run test-lint
  #     - store_test_results:
  #         path: linting-results

  # code-coverage:
  #   docker:
  #     - image: cimg/node:lts
  #   steps:
  #     - run:
  #         name: Validate Code Coverage
  #         command: |
  #           bash < (curl -s https://codecov.io/bash)
  #     - store_test_results:
  #         path: code-coverage-results

  # scan-secure:
  #   docker:
  #     - image: cimg/node:lts
  #   steps:
  #     - checkout
  #     - install_deps

  #     - run:
  #         name: Install Node Scan
  #         command: |
  #           sudo apt update
  #           sudo apt install python3-pip
  #           pip3 install nodejsscan
  #     - run:
  #         name: Execute Node Scan
  #         command: |
  #           nodejsscan -d ./ -o outputs/sast/nodejs-scan-report.json

  #     - run:
  #         name: Parse Report
  #         command: |
  #           exit $(cat sast-output.json | jq .total_count.sec)
  #     - store_artifacts:
  #         path: outputs/sast/

workflows:
  build-pack-deploy:
    jobs:
      - build
      - pack
      - jest-test
      # - integrity-test
      # - e2e-test
      # - linting
      # - code-coverage
      # - scan-secure

