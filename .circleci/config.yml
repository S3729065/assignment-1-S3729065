version: 2.1

commands:
  install_dependencies: # changed from install_deps to a fuller name for clarity.
    steps:
      - run:
          name: Install Dependencies
          command: |
            npm ci --prefix src/

      # - run:
      #     name: Install Test Modules
      #     command: |
      #       npm i -D jest-junit # The package.json file does this already.
      
      # - run:
      #     name: Make Directory for Jest Junit
      #     command: |
      #       mkdir -p jest-results # I don't need these to run.

  # image_install:
  #   steps:
  #     - run:
  #         name: Install Docker Compose
  #         command: |
  #           curl -L https://github.com/docker/compose/releases/download/1.25.3/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
  #           chmod +x ~/docker-compose
  #           sudo mv ~/docker-compose /usr/local/bin/docker-compose
  # The docker image is already being used through CircleCI, this is redundant.
  # compose_image:
  #   steps:
  #     - run:
  #         name: Docker Compose Build
  #         command: |
  #           docker-compose build

  #     - run:
  #         name: Docker Compose Up
  #         command: |
  #           docker-compose up -d

  #     - run:
  #         name: Verify Docker Compose
  #         command: |
  #           set -x
  #           docker-compose up -d
  #           docker run --network container:contacts \
  #             appropriate/curl --retry 10 --retry-delay 1 --retry-connrefused http://localhost:8080/contacts/test
  # Unnecessary code to have Docker work, even though CircleCI provides it.
jobs:
  build:
    docker:
      - image: cimg/node:lts
        auth:
          username: thenewoldmodel # NOTE(Daniel): how do I hide these values?
          password: 4stig-FireRed_1480 # ... is there a formatting pattern to hide this?
    environment:
      ENV: CI

    working_directory: ~/assignment-1-S3729065

    steps:
      - checkout
      - install_dependencies
      # - image_install
      # - compose_image
      - run:
          name: compile
          command: |
            npm build ./
      #- browser-tools/install-firefox
      #- browser-tools/install-geckodriver #NOTE(Daniel): install browsers for testing.

  pack:
    docker:
      - image: cimg/node:lts # using cimg/node:15.11.0 as stated in the docs, documented as the preferred way.
    steps:
      - run:
          name: compile
          command: |
            npm i --save npm@latest
            npm build ./
      - store_artifacts:
          path: ./simpletodoapp-1.0.0.tgz

  unit-test:
    docker:
      - image: cimg/node:lts # using cimg/node:15.11.0 as stated in the docs, documented as the preferred way.
    
    environment:
      JEST_JUNIT_OUTPUT_DIR: test/unit
    
    steps:
      - run:
          name: unit test
          command: |
            npm run test-unit

      - store_test_results:
          path: test/unit

  # integration-test:
  #     docker:
  #       - image: cimg/node:lts
  #       - image: mongo:4.0
  #     environment:
  #       APP_PORT: 8080
  #     steps:
  #         - run:
  #             name: Start Test Service
  #             command: |
  #               npm run start
  #         - run:
  #             name: Integration Test
  #             command: |
  #               npm run test-integration
  #         - store_test_results:
  #             path: test/integration

  # e2e-test:
  #   docker:
  #     - image: cimg/node:lts
  #   steps:
  #   - run:
  #       name: E2E Test
  #       command: |
  #         npm run test-e2e

  linting:
    docker:
      - image: cimg/node:lts
    steps:
      - run:
          name: Linting
          command: |
            npm run test-lint

  code-coverage:
    docker:
      - image: cimg/node:lts
    steps:
      - run:
          name: Validate Code Coverage
          command: |
            bash < (curl -s https://codecov.io/bash)

  scan-secure:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - install_dependencies

      - run:
          name: Install Node Scan
          command: |
            sudo apt update
            sudo apt install python3-pip
            pip3 install nodejsscan
      - run:
          name: Execute Node Scan
          command: |
            nodejsscan -d ./ -o outputs/sast/nodejs-scan-report.json

      - run:
          name: Parse Report
          command: |
            exit $(cat sast-output.json | jq .total_count.sec)
      - store_artifacts:
          path: ./sast-parse-report.tar.z

workflows:
  build-pack-deploy:
    jobs:
      - build
      - pack
      - jest-test
      # - integrity-test
      # - e2e-test
      - linting
      - code-coverage
      - scan-secure

